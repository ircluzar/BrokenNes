// DisplayName: LSD
// Category: Distort
precision mediump float;

// LSD â€” Psychedelic multi-axis swirl & chromatic bleed
// Goal: Layered warps, swirl center, chromatic splits, burst events.
// - Two noise warps blended + periodic waveforms
// - Event envelope triggers intense oscillations
// - Directional chromatic offsets & temporal swirl
// - Color rotation matrix & subtle luma mix
// uStrength (host not provided here) assumed external if added later
varying vec2 vTex;
uniform sampler2D uTex;   // Source frame
uniform float uTime;      // Seconds
uniform vec2 uTexSize;    // Source size
float hash(vec2 p){p=fract(p*vec2(34.123,71.77));p+=dot(p,p+23.19);return fract(p.x*p.y);}float noise(vec2 p){vec2 i=floor(p);vec2 f=fract(p);f=f*f*(3.0-2.0*f);float a=hash(i);float b=hash(i+vec2(1.0,0.0));float c=hash(i+vec2(0.0,1.0));float d=hash(i+vec2(1.0,1.0));return mix(mix(a,b,f.x),mix(c,d,f.x),f.y);}void main(){vec2 uv = vec2(vTex.x,1.0 - vTex.y);vec2 texel = 1.0 / uTexSize;float t=uTime;float drift = sin(t*0.20)*0.5+0.5;float flowPhase = t*0.35;vec2 warp1 = vec2(noise(uv*2.5 + flowPhase), noise(uv*2.5 - flowPhase));vec2 warp2 = vec2(noise(uv*5.0 - flowPhase*0.55), noise(uv*5.0 + flowPhase*0.42));vec2 warp = (warp1*0.6 + warp2*0.4 - 0.5) * 0.0095;float seg = floor(t*0.18);float segT = fract(t*0.18);float chance = hash(vec2(seg, 99.7));float event = step(0.82, chance);float envelope = smoothstep(0.07,0.28,segT)* (1.0 - smoothstep(0.55,0.92,segT));float spazz = event * envelope;float bigWave = sin(uv.y*(12.0 + sin(t*1.2)*6.0) + t*2.5) * 0.045 * spazz * (0.6 + 0.4*sin(t*0.8));float smallWave = sin(uv.y*8.0 + t*1.2)*0.003 + sin(uv.x*6.0 - t*0.9)*0.0025;float wave = bigWave + smallWave;float bleedScale = 0.45 + 0.55*drift;vec2 dir1 = normalize(vec2(0.6,0.8));vec2 dir2 = normalize(vec2(-0.7,0.4));vec2 dir3 = normalize(vec2(0.2,-0.9));vec2 center = vec2(0.5) + (vec2(sin(t*0.18), cos(t*0.14))*0.05);vec2 toC = uv - center;float r = length(toC);float rot = sin(t*0.25) * 0.4;float angle = atan(toC.y,toC.x) + rot * smoothstep(0.0,0.6,r) * (1.0 - smoothstep(0.6,0.9,r));vec2 swirlUv = center + vec2(cos(angle), sin(angle))*r;vec2 baseUv = swirlUv + warp + vec2(wave*0.25,0.0);vec2 offR = baseUv + dir1 * texel * (1.9*bleedScale) + dir2 * texel * (sin(t*1.3+uv.y*5.0)*0.9);vec2 offG = baseUv + dir2 * texel * (1.3*bleedScale) + dir3 * texel * (sin(t*1.1+uv.x*4.5)*0.8);vec2 offB = baseUv + dir3 * texel * (1.6*bleedScale) + dir1 * texel * (sin(t*1.6+uv.y*3.5)*0.75);if(spazz>0.0){float k = spazz;offR += vec2(sin(t*12.0 + uv.y*36.0), cos(t*10.0 + uv.x*30.0))*texel*11.0*k;offG += vec2(sin(t*11.0 + uv.y*28.0), sin(t*9.0 + uv.x*22.0))*texel*9.0*k;offB += vec2(cos(t*12.5 + uv.y*42.0), sin(t*14.0 + uv.x*40.0))*texel*13.0*k;}vec3 acc = vec3(0.0); float wsum = 0.0; for(int i=-3;i<=3;i++){float fi=float(i);float w=exp(-fi*fi*0.18);vec2 offs=vec2(fi*texel.x*1.15, fi*texel.y*0.55);acc.r+=texture2D(uTex, clamp(offR+offs,0.0,1.0)).r*w;acc.g+=texture2D(uTex, clamp(offG+offs*0.9,0.0,1.0)).g*w;acc.b+=texture2D(uTex, clamp(offB+offs*1.05,0.0,1.0)).b*w;wsum+=w;}vec3 col=acc/wsum;vec3 vdiff=vec3(0.0);for(int j=-2;j<=2;j++){float fj=float(j);float w=exp(-fj*fj*0.33);vec2 vOff=vec2(0.0, fj*texel.y*(0.9 + 0.5*drift));vdiff+=texture2D(uTex, clamp(baseUv+vOff,0.0,1.0)).rgb*w;}vdiff/=2.5066;col=mix(col, vdiff, 0.32 + 0.22*drift);float crA = sin(t*0.55)*0.5 + 0.5;mat3 rotM = mat3(0.65+0.35*cos(t*0.5), 0.16*sin(t*0.7), 0.20*sin(t*1.0),0.20*sin(t*0.8), 0.65+0.35*cos(t*0.45+2.0), 0.16*sin(t*0.3),0.16*sin(t*0.4), 0.20*sin(t*0.6+1.5), 0.65+0.35*cos(t*0.5+3.14));col=mix(col, clamp(rotM*col,0.0,1.2), 0.48 + 0.30*crA);float l=dot(col, vec3(0.299,0.587,0.114));col=mix(vec3(l), col, 0.92 + 0.05*sin(t*1.1));col=pow(col, vec3(0.92));col+=vec3(0.045*sin(t*2.4+uv.y*6.5),0.036*sin(t*2.0+uv.x*7.5),0.05*sin(t*2.2+uv.y*6.0))*0.35;vec2 finalUv=clamp(baseUv + vec2(wave*0.33,0.0),0.0,1.0);vec3 detail=texture2D(uTex, finalUv).rgb;col=mix(col, detail, 0.22);col=clamp(col,0.0,1.0);gl_FragColor=vec4(col,1.0);}
