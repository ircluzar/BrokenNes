@page "/options"
@inject IJSRuntime JS
@inject BrokenNes.Services.GameSaveService SaveSvc

<div class="options-root">
    <div id="pixelBgHost" class="pixel-bg-host" aria-hidden="true"></div>
    <h2 class="opt-title">OPTIONS</h2>
    <div class="opt-sections">
        <section class="opt-section">
            <h3 class="opt-h3">CORES</h3>
            <div class="opt-row">
                <button @onclick="RestoreCoresToFmc">Restore cores to FMC</button>
            </div>
            <div class="opt-row small-note">Resets CPU/PPU/APU/Clock core preferences to FMC for future sessions.</div>
        </section>
    <section class="opt-section">
            <h3 class="opt-h3">Emulator Audio</h3>
            <div class="opt-row">
                <label>Master Volume (%)</label>
        <input type="range" min="0" max="100" value="@MasterPct" @oninput="@(e=>OnSliderInput("master", e))" />
            </div>

            <h3 class="opt-h3">BrokenNes Audio</h3>
            <div class="opt-row">
                <label>Music Volume (%)</label>
                <input type="range" min="0" max="100" value="@MusicPct" @oninput="@(e=>OnSliderInput("music", e))" />
            </div>
            <div class="opt-row">
                <label>SFX Volume (%)</label>
                <input type="range" min="0" max="100" value="@SfxPct" @oninput="@(e=>OnSliderInput("sfx", e))" />
            </div>
        </section>
        <section class="opt-section">
            <h3 class="opt-h3">INPUT</h3>
            <div class="opt-row"><a class="opt-link" href="./input">Configure Inputâ€¦</a></div>
        </section>
        <section class="opt-section">
            <h3 class="opt-h3">DeckBuilder Save</h3>
            <div class="opt-row">
                <button @onclick="ClearDeckBuilderSave">Clear the save</button>
            </div>
            <div class="opt-row small-note">Empties achievements and owned cores, leaving only FMC (CPU/PPU/APU/Clock) and PX shader.</div>
            <div class="opt-row">
                <button @onclick="UnlockEverything">Unlock Everything</button>
            </div>
            <div class="opt-row small-note">Gives you all cores in your save for 100% completion. Achievements are not changed.</div>
        </section>
    </div>
    <div class="opt-footer">
    <a href="?skipHW=1" class="opt-link">RETURN</a>
    </div>
</div>

@code {
    private int MasterPct { get; set; } = 100;
    private int MusicPct { get; set; } = 42;
    private int SfxPct { get; set; } = 80;

    protected override async Task OnInitializedAsync()
    {
        // Keep audio context alive when visiting options
        try { await JS.InvokeVoidAsync("nesInterop.ensureAudioContext"); } catch { }
        // Load and apply saved volumes, then populate sliders
        try {
            await JS.InvokeVoidAsync("nesInterop.applySavedAudioVolumes");
        } catch { }
    // Ensure animated background is started (shared with Home)
    try { await JS.InvokeVoidAsync("eval", "window.homePixelBgEnsure && window.homePixelBgEnsure();"); } catch { }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try { MasterPct = (int)Math.Round((await JS.InvokeAsync<double>("nesInterop.getMasterVolume"))*100); } catch { }
            try { MusicPct = (int)Math.Round((await JS.InvokeAsync<double>("nesInterop.getMusicVolume"))*100); } catch { }
            try { SfxPct = (int)Math.Round((await JS.InvokeAsync<double>("nesInterop.getSfxVolume"))*100); } catch { }
            StateHasChanged();
        }
    }

    private async Task OnSliderInput(string kind, ChangeEventArgs e)
    {
        try {
            if(e?.Value is not null){
                if(int.TryParse(e.Value.ToString(), out var pct)){
                    var f = Math.Clamp(pct, 0, 100) / 100.0;
                    switch(kind){
                        case "master": MasterPct = pct; await JS.InvokeAsync<double>("nesInterop.setMasterVolume", f, true); break;
                        case "music": MusicPct = pct; await JS.InvokeAsync<double>("nesInterop.setMusicVolume", f, true); break;
                        case "sfx": SfxPct = pct; await JS.InvokeAsync<double>("nesInterop.setSfxVolume", f, true); break;
                    }
                }
            }
        } catch { }
    }

    private async Task RestoreCoresToFmc()
    {
        try { await JS.InvokeVoidAsync("nesInterop.idbSetItem", "pref_cpuCore", "FMC"); } catch { }
        try { await JS.InvokeVoidAsync("nesInterop.idbSetItem", "pref_ppuCore", "FMC"); } catch { }
        try { await JS.InvokeVoidAsync("nesInterop.idbSetItem", "pref_apuCore", "FMC"); } catch { }
        try { await JS.InvokeVoidAsync("nesInterop.idbSetItem", "pref_clockCore", "FMC"); } catch { }
        try { await JS.InvokeVoidAsync("eval", "alert('Core preferences reset to FMC. This applies when you open the NES.')"); } catch { }
    }

    private async Task ClearDeckBuilderSave()
    {
        try { await SaveSvc.ClearDeckBuilderSaveAsync(); } catch { }
        try { await JS.InvokeVoidAsync("eval", "alert('DeckBuilder save reset to defaults (FMC + PX).')"); } catch { }
    }

    private async Task UnlockEverything()
    {
        try { await SaveSvc.UnlockAllCoresAsync(); } catch { }
        try { await JS.InvokeVoidAsync("eval", "alert('All cores unlocked in your DeckBuilder save.')"); } catch { }
    }
}
