@page "/"

@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BrokenNes.Services.GameSaveService SaveSvc

@if (!showHealthWarning)
{
    <div class="home-hero hero-fade-in">
        <div class="hero-inner title-screen">
            <h1 class="hero-title fade-seq" data-seq="0">Broken<span>Nes</span></h1>
            <div class="title-buttons">
                <button class="title-primary fade-seq" data-seq="1" @onclick="OpenDeckBuilder" aria-label="Open Deck Builder">Deck Builder</button>
                <div class="title-secondary-group">
                    <button class="title-secondary fade-seq" data-seq="2" @onclick="BootAndEnter" aria-label="Open Emulator">BrokenNes Emulator</button>
                    <button class="title-secondary fade-seq" data-seq="3" @onclick="NavigateOptions" aria-label="Options">Options</button>
                    <button class="title-secondary fade-seq" data-seq="4" @onclick="ShowAbout" aria-label="About">About</button>
                </div>
                <div class="title-footer fade-seq" data-seq="5">
                    <a href="https://redscientist.com" target="_blank" rel="noopener noreferrer" aria-label="Visit Redscientist Labs website">2025 - Redscientist Labs</a>
                </div>
            </div>
        </div>
    </div>
}

@* One-time Under Construction notice (appears before Health Warning) *@
@if (showUnderConstruction)
{
    <div class="modal-backdrop hw-center" style="position:fixed;inset:0;background:#000c;display:flex;align-items:center;justify-content:center;z-index:6000;">
        <div class="card shadow-xl health-warning-modal">
            <div class="card-body">
                <h2 class="hw-title">Under Construction</h2>
                <div class="hw-text">
                    This software is in early development phase and is very much still in need of improvement, optimization, polishing and additional content. Please keep in mind that some of the jank is intentional, and some is intentional. New stuff will be added to the software over time.
                </div>
                <div class="hw-text">
                    If you find bugs that are clearly not supposed to happen, please report them to Ircluzar on the RTC Discord. Instructions for reproducing the issue are required with any bug report. Thanks!
                </div>
                <button class="hero-btn hw-ok-btn" @onclick="OnUnderConstructionOk" aria-label="Acknowledge under construction message">I Understand</button>
            </div>
        </div>
    </div>
}

@if (showHealthWarning && !showUnderConstruction)
{
    <div class="modal-backdrop hw-center" style="position:fixed;inset:0;background:#000c;display:flex;align-items:center;justify-content:center;z-index:6000;">
        <div class="card shadow-xl health-warning-modal">
            <div class="card-body">
                <h2 class="hw-title">Health Warning</h2>
                <div class="hw-text">
                    This software can and will generate flashing images and loud noises. Avoid using this software if you are prone to seizures.
                </div>
                <div class="hw-text">
                    A certain level of jank and glitchiness is to be expected as part of the intended experience. If you experience discomfort, please take a break or stop using the software.
                </div>
                <button class="hero-btn hw-ok-btn" @onclick="OnHealthOk" aria-label="Acknowledge health warning">OK</button>
                <audio id="plateWav" src="sfx/plates.m4a" preload="auto"></audio>
            </div>
        </div>
    </div>
}

@if (aboutVisible)
{
    <div class="modal-backdrop about-backdrop" style="position:fixed;inset:0;background:#000c;display:flex;align-items:center;justify-content:center;z-index:6500;">
        <div class="about-modal">
            <div class="about-body">
                <h2 class="about-title">About BrokenNes</h2>
                <p class="about-text">BrokenNes is a browser‑based NES emulator and corruption toolkit, built loosely with care and love and attention to detal.</p>
                <p class="about-text">Inspired by work on NET‑NES, QuickNES, and NesHawk. More info on that will be added later.</p>
                <p class="about-text">Achievements are based on RetroAchievements. Certain have beed lifted, reimagined or modified. See Retroachievements.org for individual credits.</p>
                <p class="about-text">Design and architecture: <strong>ircluzar</strong></p>
                <button class="about-close" @onclick="HideAbout" aria-label="Close About">CLOSE</button>
            </div>
        </div>
    </div>
}

@code {
    private bool _booting = false;
    private bool showHealthWarning = true; // Health warning shows by default unless skipped via query
    private bool showUnderConstruction = false; // One-time notice, loaded from save
    private bool aboutVisible = false;
    private string BuildVersion => typeof(Program).Assembly.GetName().Version?.ToString() ?? "?";
    private bool _titleStarted = false;
    // (Inline DateTime used now; keeping property optional if needed later)
    private int CurrentYear => DateTime.UtcNow.Year; // unused currently

    protected override void OnInitialized()
    {
        // Detect query parameter to optionally skip health warning
        try
        {
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            if (!string.IsNullOrEmpty(uri.Query) && uri.Query.Contains("skipHW"))
            {
                showHealthWarning = false; // Skip immediately
            }
        }
        catch { }
    }

    protected override async Task OnInitializedAsync()
    {
        // Load save to determine if Under Construction needs to be shown
        try
        {
            var save = await SaveSvc.LoadAsync();
            showUnderConstruction = !(save?.UnderConstructionAcknowledged ?? false);
        }
        catch { showUnderConstruction = false; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Auto-start title music when health warning skipped (either via param or after OK)
    if (!showHealthWarning && !_titleStarted && !showUnderConstruction)
        {
            _titleStarted = true;
            try { await JS.InvokeVoidAsync("nesInterop.ensureAudioContext"); } catch { }
            try { await JS.InvokeVoidAsync("nesInterop.applySavedAudioVolumes"); } catch { }
            try { await JS.InvokeVoidAsync("nesInterop.playTitleMusic"); } catch { }
            // Start pixel background after title sequence starts
            try { await JS.InvokeVoidAsync("eval", "window.homePixelBgEnsure && window.homePixelBgEnsure();"); } catch { }
            // Safety delayed retry (in case container not yet in DOM due to render timing)
            try { await JS.InvokeVoidAsync("eval", "setTimeout(()=>{window.homePixelBgEnsure && window.homePixelBgEnsure();}, 350);"); } catch { }
        }
    }

    private string BuildRel(string path){
        // Ensure we respect possible subdirectory base (<base href="./"> becomes current folder). Use relative no-leading-slash navigation.
        if(string.IsNullOrWhiteSpace(path)) return "";
        // Trim any leading slash so NavigateTo doesn't reset to domain root under subfolder hosting.
        path = path.TrimStart('/');
        return path;
    }

    private async Task BootAndEnter()
    {
        if (_booting) return; _booting = true;
        try
        {
            await JS.InvokeVoidAsync("nesInterop.ensureAudioContext");
            // Fade out title music before entering emulator
            try { await JS.InvokeVoidAsync("nesInterop.fadeOutAndStopTitleMusic"); } catch {}
            try { await JS.InvokeVoidAsync("eval", "window.__brokenNesPreBoot=1"); } catch {}
            // Stop pixel background before leaving page
            try { await JS.InvokeVoidAsync("eval", "window.homePixelBg && window.homePixelBg.stop()"); } catch { }
        }
        catch { }
    Nav.NavigateTo(BuildRel("nes"), forceLoad: false);
    }

    private async void OpenDeckBuilder()
    {
        // Check whether the intro story was seen; if not, route to Story first.
        bool seen = false;
        try { var save = await SaveSvc.LoadAsync(); seen = save.SeenStory; } catch { }
        var target = seen ? "deck-builder" : "story";
        // Keep animated background alive between Home and target
        Nav.NavigateTo(BuildRel(target), forceLoad: false);
    }

    private void NavigateOptions()
    {
    // Keep animated background alive between Home and Options
    Nav.NavigateTo(BuildRel("options"), forceLoad: false);
    }

    private void ShowAbout() => aboutVisible = true;
    private void HideAbout() => aboutVisible = false;

    private async Task OnHealthOk()
    {
        // Ensure audio context is ready before playing sound
    try { await JS.InvokeVoidAsync("nesInterop.ensureAudioContext"); } catch { }
    try { await JS.InvokeVoidAsync("nesInterop.applySavedAudioVolumes"); } catch { }
    // Connect and play the plate sound via SFX gain
    try { await JS.InvokeVoidAsync("nesInterop.connectElementToSfx", "plateWav"); } catch { }
    try { await JS.InvokeVoidAsync("nesInterop.playSfxElement", "plateWav"); } catch { }
        showHealthWarning = false;
    // Start looping title music (fade in handled in JS)
    try { await JS.InvokeVoidAsync("nesInterop.playTitleMusic"); } catch {}
    // Start pixel background now that hero will appear
    try { await JS.InvokeVoidAsync("eval", "window.homePixelBgEnsure && window.homePixelBgEnsure(); setTimeout(()=>{window.homePixelBgEnsure && window.homePixelBgEnsure();}, 350);"); } catch { }
    }

    private async Task OnUnderConstructionOk()
    {
        // Persist acknowledgment so it only shows once
        try
        {
            var save = await SaveSvc.LoadAsync();
            if (save != null && !save.UnderConstructionAcknowledged)
            {
                save.UnderConstructionAcknowledged = true;
                await SaveSvc.SaveAsync(save);
            }
        }
        catch { }
        showUnderConstruction = false;
        // If health warning was skipped via query, title music/background will start via OnAfterRenderAsync
        // Otherwise, health warning remains visible until acknowledged
    }
}
